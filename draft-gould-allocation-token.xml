<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3688 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml">
<!ENTITY RFC3915 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3915.xml">
<!ENTITY RFC5730 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5730.xml">
<!ENTITY RFC5731 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5731.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="yes"?>
<!-- keep one blank line between list items -->
<?rfc comments="yes" ?>
<!-- show cref output -->
<?rfc inline="yes" ?>
<!-- inline cref output -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-gould-allocation-token-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <title abbrev="allocationToken">
    Allocation Token Extension for the Extensible Provisioning Protocol (EPP)</title>

    <author fullname="James Gould" initials="J.G" surname="Gould">
      <organization>VeriSign, Inc.</organization>

      <address>
        <postal>
          <street>12061 Bluemont Way</street>

          <city>Reston</city>

          <region>VA</region>

          <code>20190</code>

          <country>US</country>
        </postal>

        <email>jgould@verisign.com</email>

        <uri>http://www.verisigninc.com</uri>
      </address>
    </author>

    <author fullname="Trung Tran" initials="T.T" surname="Tran">
      <organization>Neustar</organization>

      <address>
        <postal>
          <street>21575 Ridgetop Circle</street>

          <city>Sterling</city>

          <region>VA</region>

          <code>20166</code>

          <country>US</country>
        </postal>

        <email>Trung.Tran@neustar.biz</email>

        <uri>http://www.neustar.biz</uri>
      </address>
    </author>

    <author fullname="Sharon Wodjenski" initials="S.W" surname="Wodjenski">
      <organization>Neustar</organization>

      <address>
        <postal>
          <street>21575 Ridgetop Circle</street>

          <city>Sterling</city>

          <region>VA</region>

          <code>20166</code>

          <country>US</country>
        </postal>

        <email>Sharon.Wodjenski@neustar.biz</email>

        <uri>http://www.neustar.biz</uri>
      </address>
    </author>

    <date day="9" month="October" year="2014"/>

    <abstract>
      <t>This document describes an Extensible Provisioning Protocol (EPP)
      extension for including an allocation token or code for allocating 
      an object like a domain name to the client.  The allocation token 
      MAY be transferred out-of-band to a client to give them authorization 
      to allocate an object using one of the EPP transform commands 
      including create, update, and transfer.</t>
    </abstract>
        
  </front>

  <middle>
    <section title="Introduction">
      <t>This document describes an extension mapping for version 1.0 of the
      <xref target="RFC5730">Extensible Provisioning Protocol (EPP)</xref>.
      This mapping, an extension to EPP object mappings like the <xref
      target="RFC5731">EPP domain name mapping</xref>, for passing 
      an allocation token one of the EPP transform commands including 
      create, update, and transfer.  The allocation token is known to the 
      server to authorize a client that passes a matching allocation token 
      with one of the supported EPP transform commands.  It is up to server 
      policy which EPP transform commands and which objects support the 
      allocation token.  The allocation token MAY be returned to an 
      authorized client for passing out-of-band to a client that 
      uses it with an EPP transform command.</t>

      <section title="Conventions Used in This Document">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>

        <t>XML is case sensitive. Unless stated otherwise, XML specifications
        and examples provided in this document MUST be interpreted in the
        character case presented in order to develop a conforming
        implementation.</t>
        
        <t>In examples, "C:" represents lines sent by a protocol client and "S:" represents lines returned by a protocol server.  
        Indentation and white space in examples are provided only to illustrate element relationships 
        and are not a REQUIRED feature of this protocol.        
        </t>

        <t>"allocationToken-1.0" is used as an abbreviation for
        "urn:ietf:params:xml:ns:allocationToken-1.0". The XML namespace prefix 
        "allocationToken" is used, but implementations MUST NOT depend on 
        it and instead employ
        a proper namespace-aware XML parser and serializer to interpret and
        output the XML documents.</t>
      </section>
    </section>

    <section anchor="attrs" title="Object Attributes">
    
      <t>This extension adds additional elements to EPP object mappings like the <xref
      target="RFC5731">EPP domain name mapping</xref>. Only those new elements
      are described here.</t>
      
      <section anchor="allocationToken" title="Allocation Token">
        
        <t>The Allocation Token is a simple XML "token" type.  The exact 
        format of the Allocation Token is up to server policy.  The server 
        MUST have the allocation token for each object to match against the 
        allocation token passed by the client to authorize the allocation of 
        the object.  The same &lt;allocationToken:allocationToken&gt; element 
        is used for all of the supported EPP transform commands as well as the 
        info response.  If an invalid allocation token is passed the server MUST 
        return an EPP error result code of 2201.</t>
               
        
       <figure>
            <preamble>An example &lt;allocationToken:allocationToken&gt; element 
            with value of "abc123":</preamble>

            <artwork><![CDATA[
<allocationToken:allocationToken xmlns:allocationToken=
          "urn:ietf:params:xml:ns:allocationToken-1.0">
  abc123
</allocationToken:allocationToken>]]></artwork>
       </figure>
        
      </section> 
 
    </section>

    <section anchor="commands" title="EPP Command Mapping">
      <t>A detailed description of the EPP syntax and semantics can be found
      in the EPP core protocol specification <xref target="RFC5730"/>.</t>
      
      <section anchor="queryCommands" title="EPP Query Commands">
      
        <t>EPP provides three commands to retrieve object information: &lt;check&gt; to determine 
        if an object is known to the server, &lt;info&gt; to retrieve detailed information associated 
        with an object, and &lt;transfer&gt; to retrieve object transfer status information.</t>

      <section anchor="checkCommand" title="EPP &lt;check&gt; Command">
      
       <t>This extension defines additional elements to extend the EPP &lt;check&gt;
        command of an object mapping like <xref target="RFC5731"/>.</t>
	   <t>This extension allow clients to check the availability of an object with an allocation token, as described in <xref target="allocationToken"/>.
	   Clients can check if an object can be created using the allocation token.  The allocation token is applied to all object names included 
	   in the EPP &lt;check&gt; command.</t>

       <figure>
            <preamble>Example &lt;check&gt; command for the example.tld domain name using 
            the &lt;allocationToken:allocationToken&gt; extension with the allocation 
            token of 'abc123':</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <check>
C:      <domain:check
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>example.tld</domain:name>
C:      </domain:check>
C:    </check>
C:    <extension>
C:      <allocationToken:allocationToken
C:        xmlns:allocationToken=
C:          "urn:ietf:params:xml:ns:allocationToken-1.0">
C:        abc123
C:      </allocationToken:allocationToken>
C:    </extension>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
          <t>If the query was successful, the server replies with an &lt;check&gt; response providing 
             availability status of queried object.</t>	  

          <figure>
            <preamble>Example &lt;check&gt; domain response for a &lt;check&gt; command 
            using the &lt;allocationToken:allocationToken&gt; extension:</preamble>

            <artwork>
<![CDATA[
S:<?xml version="1.0" encoding="UTF-8"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S: <response>
S:  <result code="1000">
S:   <msg lang="en-US">Command completed successfully</msg>
S:  </result>
S:  <resData>
S:   <domain:chkData 
S:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
S:    <domain:cd>
S:     <domain:name avail="0">example.tld</domain:name>
S:     <domain:reason>Invalid domain-token pair</domain:reason>
S:    </domain:cd>
S:   </domain:chkData>
S:  </resData>
S:  <trID>
S:   <clTRID>ABC-DEF-12345</clTRID>
S:   <svTRID>54321-XYZ</svTRID>
S:  </trID>
S: </response>
S:</epp>]]></artwork>
          </figure>

		  
       <figure>
            <preamble>Example &lt;check&gt; command with the &lt;allocationToken:allocationToken&gt; 
            extension for the example.tld and example2.tld domain names.  Availability of  
			example.tld and example2.tld domain names are based on the allocation token 'abc123':</preamble>

            <artwork>
<![CDATA[
C:<?xml version="1.0" encoding="UTF-8"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C: <command>
C:  <check>
C:   <domain:check 
C:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:    <domain:name>example.tld</domain:name>
C:    <domain:name>example2.tld</domain:name>
C:   </domain:check>
C:  </check>
C:  <extension>
C:   <allocationToken:allocationToken 
C:     xmlns:allocationToken=
C:       "urn:ietf:params:xml:ns:allocationToken-1.0">
C:     abc123
C:   </allocationToken:allocationToken>
C:  </extension>
C:  <clTRID>ABC-DEF-12345</clTRID>
C: </command>
C:</epp>]]></artwork>
       </figure>

          <figure>
            <preamble>Example &lt;check&gt; domain response for multiple domain names in 
            the &lt;check&gt; command using the &lt;allocationToken:allocationToken&gt; 
            extension:</preamble>

            <artwork>
<![CDATA[
S:<?xml version="1.0" encoding="UTF-8"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S: <response>
S:  <result code="1000">
S:   <msg lang="en-US">Command completed successfully</msg>
S:  </result>
S:  <resData>
S:   <domain:chkData 
S:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
S:    <domain:cd>
S:     <domain:name avail="0">example.tld</domain:name>
S:     <domain:reason>Invalid domain-token pair</domain:reason>
S:    </domain:cd>
S:    <domain:cd>
S:     <domain:name avail="1">example2.tld</domain:name>
S:    </domain:cd>
S:   </domain:chkData>
S:  </resData>
S:  <trID>
S:   <clTRID>ABC-DEF-12345</clTRID>
S:   <svTRID>54321-XYZ</svTRID>
S:  </trID>
S: </response>
S:</epp>]]></artwork>
          </figure>
	   	
       <t>This extension does not add any elements to the EPP &lt;check&gt; response 
       described in the <xref target="RFC5730"/>.</t>   
		  
      </section>

      <!-- end CHECK command -->

      <section anchor="infoCommand" title="EPP &lt;info&gt; Command">
 
        <t>This extension defines additional elements to extend the EPP
        &lt;info&gt; command of an object mapping like <xref target="RFC5731"/>.</t>

       <t>The EPP &lt;info&gt; command allows a client to request information on an 
       existing object.  Authorized clients MAY retrieve the <xref target="allocationToken">allocation token</xref> along 
       with the other object information using the &lt;allocationToken:info&gt; element 
       that identifies the extension namespace.  The &lt;allocationToken:info&gt; 
       element is an empty element that serves as a marker to the server to 
       return the &lt;allocationToken:allocationToken&gt; element, defined in 
       <xref target="allocationToken"/>, in the info response.  If the client is not 
       authorized to receive the <xref target="allocationToken">allocation token</xref>, the server MUST 
       return an EPP error result code of 2201.  If the client is authorized to 
       receive the <xref target="allocationToken">allocation token</xref>, but there is no <xref target="allocationToken">allocation token</xref> 
       associated with the object, the server MUST return an EPP error result code of 
       2303 object referencing the &lt;allocationToken:info&gt; element.</t> 

       <figure>
            <preamble>Example &lt;info&gt; command with the allocationToken:info 
            extension for the example.tld domain name:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:   <info>
C:    <domain:info
C:      xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"
C:      xsi:schemaLocation="urn:ietf:params:xml:ns:domain-1.0
C:      domain-1.0.xsd">
C:      <domain:name>example.tld</domain:name>
C:    </domain:info>
C:   </info>
C:   <extension>
C:      <allocationToken:info
C:        xmlns:allocationToken=
C:          "urn:ietf:params:xml:ns:allocationToken-1.0/>
C:   </extension>
C:   <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
       
          <t>If the query was successful, the server replies with an
          &lt;allocationToken:allocationToken&gt; element, as described in 
          <xref target="allocationToken"/>.</t>

          <figure>
            <preamble>Example &lt;info&gt; domain response using the 
            &lt;allocationToken:allocationToken&gt; extension:</preamble>

            <artwork><![CDATA[
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <domain:infData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
S:        <domain:name>example.tld</domain:name>
S:        <domain:roid>EXAMPLE1-REP</domain:roid>
S:        <domain:status s="pendingCreate"/>
S:        <domain:registrant>jd1234</domain:registrant>
S:        <domain:contact type="admin">sh8013</domain:contact>
S:        <domain:contact type="tech">sh8013</domain:contact>
S:        <domain:clID>ClientX</domain:clID>
S:        <domain:crID>ClientY</domain:crID>
S:        <domain:crDate>2012-04-03T22:00:00.0Z</domain:crDate>
S:        <domain:authInfo>
S:          <domain:pw>2fooBAR</domain:pw>
S:        </domain:authInfo>
S:      </domain:infData>
S:    </resData>
S:    <extension>
S:      <allocationToken:allocationToken
S:        xmlns:allocationToken=
S:          "urn:ietf:params:xml:ns:allocationToken-1.0">
S:        abc123
S:      </allocationToken:allocationToken>
S:    </extension>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>54321-XYZ</svTRID>
S:    </trID>
S:  </response>
S:</epp>]]></artwork>
          </figure>
       
      </section>
      <!-- end INFO command -->
      
      <section anchor="transferQueryCommand" title="EPP &lt;transfer&gt; Command">
      
       <t>This extension does not add any elements to the EPP &lt;transfer&gt; query command 
       or &lt;transfer&gt; response described in the <xref target="RFC5730"/>.</t>

      </section>
      <!-- end TRANSFER QUERY command -->
      
      </section>
      
      <section anchor="transformCommands" title="EPP Transform Commands">
      
        <t>EPP provides five commands to transform objects: &lt;create&gt; to create an instance of an object, 
        &lt;delete&gt; to delete an instance of an object, &lt;renew&gt; to extend the validity period of an object,
        &lt;transfer&gt; to manage object sponsorship changes, and &lt;update&gt; to change information associated 
        with an object.</t>

      <section anchor="createCommand" title="EPP &lt;create&gt; Command">
      
       <t>This extension defines additional elements to extend the EPP
        &lt;create&gt; command of an object mapping like <xref target="RFC5731"/>.</t>
        
       <t>The EPP &lt;create&gt; command provides a transform operation that allows a client to create an object.  
       In addition to the EPP command elements described in an object mapping like <xref target="RFC5731"/>, the command MUST contain a 
       child &lt;allocationToken:allocationToken&gt; element, as defined in <xref target="allocationToken"/>, that identifies the extension namespace 
       for the client to be authorized to create and allocate the object.  If the <xref target="allocationToken">allocation token</xref> does not match 
       the object's <xref target="allocationToken">allocation token</xref>, the server MUST 
       return an EPP error result code of 2201.:</t>
                     
       <figure>
            <preamble>Example &lt;create&gt; command to create a domain object with an allocation token:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <create>
C:      <domain:create
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>example.tld</domain:name>
C:        <domain:registrant>jd1234</domain:registrant>
C:        <domain:contact type="admin">sh8013</domain:contact>
C:        <domain:contact type="tech">sh8013</domain:contact>
C:        <domain:authInfo>
C:          <domain:pw>2fooBAR</domain:pw>
C:        </domain:authInfo>
C:      </domain:create>
C:    </create>
C:    <extension>
C:      <allocationToken:allocationToken
C:        xmlns:allocationToken=
C:          "urn:ietf:params:xml:ns:allocationToken-1.0">
C:        abc123
C:      </allocationToken:allocationToken>
C:    </extension>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
       
       <t>This extension does not add any elements to the EPP &lt;create&gt; response described 
       in the <xref target="RFC5730"/>.</t>      
       
      </section>
      <!-- end CREATE command -->

      <section anchor="deleteCommand" title="EPP &lt;delete&gt; Command">
      
       <t>This extension does not add any elements to the EPP &lt;delete&gt; command 
       or &lt;delete&gt; response described in the <xref target="RFC5730"/>.</t>
         
      </section>
      <!-- end DELETE command -->

      <section anchor="renewCommand" title="EPP &lt;renew&gt; Command">
      
       <t>This extension does not add any elements to the EPP &lt;renew&gt; command 
       or &lt;renew&gt; response described in the <xref target="RFC5730"/>.</t>
       
      </section>
      <!-- end RENEW command -->
      
      <section anchor="transferCommand" title="EPP &lt;transfer&gt; Command">
      
       <t>This extension defines additional elements to extend the EPP
        &lt;transfer&gt; request command of an object mapping like <xref target="RFC5731"/>.</t>
        
       <t>The EPP &lt;transfer&gt; request command provides a transform operation that allows a client to request the 
       transfer of an object.  
       In addition to the EPP command elements described in an object mapping like <xref target="RFC5731"/>, the command MUST contain a 
       child &lt;allocationToken:allocationToken&gt; element, as defined in <xref target="allocationToken"/>, that identifies the extension namespace 
       for the client to be authorized to transfer and allocate the object.  If the <xref target="allocationToken">allocation token</xref> does not match 
       the object's <xref target="allocationToken">allocation token</xref>, the server MUST 
       return an EPP error result code of 2201.:</t>
                     
       <figure>
            <preamble>Example &lt;transfer&gt; request command to allocate the domain object with 
            the allocation token:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <transfer op="request">
C:      <domain:transfer 
C:        xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>example1.tld</domain:name>
C:        <domain:period unit="y">1</domain:period>
C:        <domain:authInfo>
C:          <domain:pw>2fooBAR</domain:pw>
C:        </domain:authInfo>
C:      </domain:transfer>
C:    </transfer>
C:    <extension>
C:      <allocationToken:allocationToken
C:        xmlns:allocationToken=
C:          "urn:ietf:params:xml:ns:allocationToken-1.0">
C:        abc123
C:      </allocationToken:allocationToken>
C:    </extension>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
       
       <t>This extension does not add any elements to the EPP &lt;transfer&gt; response described 
       in the <xref target="RFC5730"/>.</t>      
       
      </section>
      <!-- end TRANSFER command -->
      
      <section anchor="updateCommand" title="EPP &lt;update&gt; Command">
      
       <t>This extension defines additional elements to extend an extension of an empty EPP
        &lt;update&gt; command of an object mapping like <xref target="RFC5731"/>.  An 
        example of an extension of an empty EPP &lt;update&gt; command is the definition of the 
        restore command within <xref target="RFC3915"/>.</t>
        
       <t>An extension of an empty EPP &lt;update&gt; command defines a new verb that transforms an object.    
       In addition to the EPP command elements described in an object mapping like <xref target="RFC5731"/>, the command MUST contain a 
       child &lt;allocationToken:allocationToken&gt; element, as defined in <xref target="allocationToken"/>, that identifies the extension namespace 
       for the client to be authorized to allocate the object.  If the <xref target="allocationToken">allocation token</xref> does not match 
       the object's <xref target="allocationToken">allocation token</xref>, the server MUST 
       return an EPP error result code of 2201.:</t>
                     
       <figure>
            <preamble>Example use an extension of an empty &lt;update&gt; command to release a 
            domain object with an allocation token:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <update>
C:      <domain:update 
C:        xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>example1.tld</domain:name>
C:      </domain:update>
C:    </update>
C:    <extension>
C:      <release:release
C:        xmlns:release="urn:ietf:params:xml:ns:release-1.0"/>
C:      <allocationToken:allocationToken
C:        xmlns:allocationToken=
C:          "urn:ietf:params:xml:ns:allocationToken-1.0">
C:        abc123
C:      </allocationToken:allocationToken>
C:    </extension>
C:    <clTRID>ABC-12345-XYZ</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
       
       <t>This extension does not add any elements to the EPP &lt;update&gt; response described 
       in the <xref target="RFC5730"/>.</t>      
        
      </section>
      <!-- end UPDATE command -->

    </section>
      
    </section>

    <!-- EPP command mapping -->

    <section anchor="syntax" title="Formal Syntax">
    
      <t>One schema is presented here that is the EPP Allocation Token Extension
      schema.</t>
      
      <t>The formal
      syntax presented here is a complete schema representation of the object
      mapping suitable for automated validation of EPP XML instances. The
      BEGIN and END tags are not part of the schema; they are used to note the
      beginning and ending of the schema for URI registration purposes.</t>

    <section title="Allocation Token Extension Schema">

      <figure>
        <artwork><![CDATA[
BEGIN
<?xml version="1.0" encoding="UTF-8"?>

<schema targetNamespace="urn:ietf:params:xml:ns:allocationToken-1.0"
  xmlns:allocationToken="urn:ietf:params:xml:ns:allocationToken-1.0"
  xmlns="http://www.w3.org/2001/XMLSchema"
  elementFormDefault="qualified">
  
  <annotation>
    <documentation>
      Extensible Provisioning Protocol v1.0
      Allocation Token Extension.
    </documentation>
  </annotation>

  <!-- Element used in info command to get allocation token. -->
  <element name="info"/>

  <!-- Allocation Token used in transform 
  commands and info response -->
  <element name="allocationToken" 
    type="allocationToken:allocationTokenType"/>
                              
   <complexType name="allocationTokenType">
    <simpleContent>
      <extension base="token"/>
    </simpleContent>
  </complexType>
   
   <!-- End of schema.-->   
</schema>
END]]></artwork>
      </figure>
      </section>
    </section>
   
   <section title="Change History">
    <section title="Version 00" anchor="version-00">
      <t><list style="numbers">
        <t>Initial version.</t>
      </list></t>
    </section>
   </section>
    
    <section anchor="IANA" title="IANA Considerations">
         <t>
             This document uses URNs to describe XML namespaces and XML schemas
             conforming to a registry mechanism described in <xref target="RFC3688"/>.
             One URI assignment must be completed by the IANA.
         </t>

         <t>Registration request for the allocationToken namespace:</t>
         
         <t>Registration request for the extension XML schema:</t>
         
         <t>URI: urn:ietf:params:xml:ns:allocationToken-1.0</t>
         
         <t>Registrant Contact: IESG</t>
          
         <t>XML: See the "Formal Syntax" section of this document.</t>
 
    </section>


    <section anchor="Security" title="Security Considerations">
      <t>The mapping extensions described in this document do not provide any
      security services beyond those described by <xref
      target="RFC5730">EPP</xref> and protocol layers used by EPP. The security
      considerations described in these other specifications apply to this
      specification as well.</t>
    </section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
       
      &RFC2119;
      
      &RFC3688;      

      &RFC3915;

      &RFC5730;

      &RFC5731;

    </references>
  </back>

  <!-- vim: set ts=2 sw=2 expandtab: -->
</rfc>
